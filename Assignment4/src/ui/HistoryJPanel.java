/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.PatientMedicalDetails;

/**
 *
 * @author tarushukla
 */
public class HistoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form historyJPanel
     */
    PatientMedicalDetails patientMedicalDetails;
    DefaultTableModel model;
    public HistoryJPanel(PatientMedicalDetails patientMedicalDetails) {
        initComponents();
        this.patientMedicalDetails = patientMedicalDetails;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        lblVitalSigns = new javax.swing.JLabel();
        lblNeighborhood = new javax.swing.JLabel();
        comboNeighborhood = new javax.swing.JComboBox<>();
        comboVital = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnABP = new javax.swing.JButton();
        lblABP = new javax.swing.JLabel();

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Health Plan Id", "Name", "City", "Body Temperature", "Pulse Rate", "Respiration Rate", "Blood Temperature"
            }
        ));
        jScrollPane1.setViewportView(tblHistory);

        lblTitle.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Search for the following factors:");

        lblVitalSigns.setText("Abnormality in Vital Signs:");

        lblNeighborhood.setText("Neighborhood:");

        comboNeighborhood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Back Bay", "Downtown", "Beacon hill", "Brighton","Mission Hill","Jamaica Plain","Roxbury","West Side","Green Hill","Lincoln","Cider Mill","Pelham","Longmeadow","Northampton","Wilbraham","MIT","Cambridgeport","Riverside","Pawtucketville","Belvidere","Centralville" }));
        comboNeighborhood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboNeighborhoodActionPerformed(evt);
            }
        });

        comboVital.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Body Temperature", "Pulse Rate", "Respiration Rate", "Blood Pressure" }));
        comboVital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVitalActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnABP.setText("Search");
        btnABP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnABPActionPerformed(evt);
            }
        });

        lblABP.setText("Total number of people with abnormal Blood Pressure : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(lblNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(lblABP)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblVitalSigns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboVital, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnABP, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVitalSigns, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboVital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnABP)
                    .addComponent(lblABP, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(309, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboNeighborhoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboNeighborhoodActionPerformed

    }//GEN-LAST:event_comboNeighborhoodActionPerformed

    private void comboVitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVitalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboVitalActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        model = (DefaultTableModel)tblHistory.getModel();
          model.setRowCount(0);
          String n = comboNeighborhood.getSelectedItem().toString();
          String vs = comboVital.getSelectedItem().toString();
          System.out.println(vs);
          String bt = "Body Temperature";
          String pr = "Pulse Rate";
          String rr = "Respiration Rate";
          String bp = "Blood Pressure";
  for(int i=0;i<patientMedicalDetails.getPatientMedicalDetails().size();i++){

         String nb = (patientMedicalDetails.getPatientMedicalDetails().get(i).getNeighborhood());
         
      if(n.equalsIgnoreCase(nb) && vs.equals(bt)){
          System.out.println("inside bt");
           System.out.println("line 193: "+i);
          Object[] object={patientMedicalDetails.getPatientMedicalDetails().get(i).getDate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getHealthPlanId(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getName(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getCity(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getBodyTemp()};
        model.addRow(object);
      } else if(n.equalsIgnoreCase(nb) && vs.equals(pr)){
          System.out.println("inside pr");
           System.out.println("line 202: "+i);
          Object[] object={patientMedicalDetails.getPatientMedicalDetails().get(i).getDate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getHealthPlanId(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getName(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getCity(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getBodyTemp(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getPulseRate()};
        model.addRow(object);
      } else if (n.equalsIgnoreCase(nb) && vs.equals(rr)){
          System.out.println("inside rr");
           System.out.println("line 212: "+i);
          Object[] object={patientMedicalDetails.getPatientMedicalDetails().get(i).getDate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getHealthPlanId(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getName(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getCity(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getBodyTemp(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getPulseRate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getRespirationRate()};
        model.addRow(object);
      } else if(n.equalsIgnoreCase(nb) && vs.equals(bp)){
          System.out.println("inside bp");
           System.out.println("line 222: "+i);
          Object[] object={patientMedicalDetails.getPatientMedicalDetails().get(i).getDate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getHealthPlanId(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getName(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getCity(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getBodyTemp(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getPulseRate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getRespirationRate(),
            patientMedicalDetails.getPatientMedicalDetails().get(i).getBloodPressure()};
        model.addRow(object);
      }
  }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnABPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnABPActionPerformed
        // TODO add your handling code here:
     String s = "";
        int bp=0;
         int count=0;  
         model = (DefaultTableModel)tblHistory.getModel();
          model.setRowCount(0);
        ArrayList<String> list = new ArrayList<String>();
         try{
        for(int i=0;i<patientMedicalDetails.getPatientMedicalDetails().size();i++){
                    bp = patientMedicalDetails.getPatientMedicalDetails().get(i).getBloodPressure();
                    System.out.println(bp);
          s =patientMedicalDetails.getPatientMedicalDetails().get(i).getBloodPressure().toString();
            System.out.println(s);
           if(bp>80 && bp<120){
            list.add(s);
            count++; 
            }
           }
        }catch(NullPointerException e){
                System.out.println(e);
             }
       // ArrayList<String> newlist = removeDuplicates(list);
        JOptionPane.showMessageDialog(btnABP,"Abnormal Blood Pressure Count: "+ count);
    
   
//    private ArrayList<String> removeDuplicates(ArrayList<String> list){
//        ArrayList<String> newList = new ArrayList<String>();
//        for(String element : list){
//            if(!newList.contains(element)){
//                newList.add(element);
//            }
//        }
//         return newList;
    }//GEN-LAST:event_btnABPActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnABP;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboNeighborhood;
    private javax.swing.JComboBox<String> comboVital;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblABP;
    private javax.swing.JLabel lblNeighborhood;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVitalSigns;
    private javax.swing.JTable tblHistory;
    // End of variables declaration//GEN-END:variables
}
