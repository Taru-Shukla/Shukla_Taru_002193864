/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import model.PatientMedicalDetails;
import model.PatientPersonalDetails;

/**
 *
 * @author tarushukla
 */

public class PatientVitalJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientVitalJPanel
     */
    PatientMedicalDetails patientMedicalDetails;
    public PatientVitalJPanel(PatientMedicalDetails patientMedicalDetails) {
        initComponents();
        this.patientMedicalDetails = patientMedicalDetails;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHealthPlanId = new javax.swing.JLabel();
        txtHealthPlanId = new javax.swing.JTextField();
        lblBodyTemp = new javax.swing.JLabel();
        lblPulseRate = new javax.swing.JLabel();
        lblRespirationRate = new javax.swing.JLabel();
        lblBP = new javax.swing.JLabel();
        txtBodyTemp = new javax.swing.JTextField();
        txtRespirationRate = new javax.swing.JTextField();
        txtPulseRate = new javax.swing.JTextField();
        txtBP = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();

        lblHealthPlanId.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblHealthPlanId.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblHealthPlanId.setText("Health Plan Id");

        lblBodyTemp.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblBodyTemp.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblBodyTemp.setText("Body Temperature");

        lblPulseRate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblPulseRate.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPulseRate.setText("Pulse Rate");

        lblRespirationRate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblRespirationRate.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblRespirationRate.setText("Respiration Rate");

        lblBP.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblBP.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblBP.setText("Blood Pressure");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBP, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBodyTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHealthPlanId, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtHealthPlanId, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(txtBP)
                            .addComponent(txtRespirationRate)
                            .addComponent(txtPulseRate)
                            .addComponent(txtBodyTemp)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(235, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHealthPlanId, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHealthPlanId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBodyTemp)
                    .addComponent(txtBodyTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPulseRate)
                    .addComponent(txtPulseRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRespirationRate)
                    .addComponent(txtRespirationRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBP)
                    .addComponent(txtBP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String date = new SimpleDateFormat("yyyy/MM/dd").format(Calendar.getInstance().getTime());
        String healthPlan = txtHealthPlanId.getText();
        Float bodyTemp = Float.parseFloat(txtBodyTemp.getText());
        Integer pulseRate= Integer.parseInt(txtPulseRate.getText());;
        Integer respirationRate=Integer.parseInt(txtRespirationRate.getText());;
        Integer bloodPressure= Integer.parseInt(txtBP.getText());
try{
        for(PatientPersonalDetails ppd : patientMedicalDetails.getPatientMedicalDetails()){
            if(txtHealthPlanId.getText().equalsIgnoreCase(ppd.getHealthPlanId())){
                PatientPersonalDetails pmd = patientMedicalDetails.addNewDetails();
        if(!healthPlan.isEmpty()){
            ppd.setHealthPlanId(healthPlan);
        }
        else{
            JOptionPane.showMessageDialog(this, "Health Plan Number is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
           if(!pulseRate.toString().isEmpty()){
            ppd.setPulseRate(pulseRate);
        }
        else{
            JOptionPane.showMessageDialog(this, "Pulse Rate is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        ppd.setDate(date);
        if(!bodyTemp.toString().isEmpty()){
                ppd.setBodyTemp(bodyTemp);
            
           
        }
        else{
            JOptionPane.showMessageDialog(this, "Body Temperature is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } if(!respirationRate.toString().isEmpty()){
            ppd.setRespirationRate(respirationRate);
        }
        else{
            JOptionPane.showMessageDialog(this, "Respiration Rate is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } if(!bloodPressure.toString().isEmpty()){
            ppd.setBloodPressure(bloodPressure);
        }
        else{
            JOptionPane.showMessageDialog(this, "Blood Pressure is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } 
        JOptionPane.showMessageDialog(this, "Patient Vital details added.");
       txtHealthPlanId.setText("");
       
        txtRespirationRate.setText("");
        txtPulseRate.setText("");
        txtBodyTemp.setText("");
        txtBP.setText("");
            }
        }
        PatientPersonalDetails ppd = patientMedicalDetails.addNewDetails();
        if(!healthPlan.isEmpty()){
            ppd.setHealthPlanId(healthPlan);
        }
        else{
            JOptionPane.showMessageDialog(this, "Health Plan Number is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
           if(!pulseRate.toString().isEmpty()){
            ppd.setPulseRate(pulseRate);
        }
        else{
            JOptionPane.showMessageDialog(this, "Pulse Rate is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        ppd.setDate(date);
        if(!bodyTemp.toString().isEmpty()){
            ppd.setBodyTemp(bodyTemp);
        }
        else{
            JOptionPane.showMessageDialog(this, "Body Temperature is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } if(!respirationRate.toString().isEmpty()){
            ppd.setRespirationRate(respirationRate);
        }
        else{
            JOptionPane.showMessageDialog(this, "Respiration Rate is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } if(!bloodPressure.toString().isEmpty()){
            ppd.setBloodPressure(bloodPressure);
        }
        else{
            JOptionPane.showMessageDialog(this, "Blood Pressure is empty","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } 
        JOptionPane.showMessageDialog(this, "Patient Vital details added.");
       
        txtHealthPlanId.setText("");
       
        txtRespirationRate.setText("");
        txtPulseRate.setText("");
        txtBodyTemp.setText("");
        txtBP.setText("");
} catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblBodyTemp;
    private javax.swing.JLabel lblHealthPlanId;
    private javax.swing.JLabel lblPulseRate;
    private javax.swing.JLabel lblRespirationRate;
    private javax.swing.JTextField txtBP;
    private javax.swing.JTextField txtBodyTemp;
    private javax.swing.JTextField txtHealthPlanId;
    private javax.swing.JTextField txtPulseRate;
    private javax.swing.JTextField txtRespirationRate;
    // End of variables declaration//GEN-END:variables
}
